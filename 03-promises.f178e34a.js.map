{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,UACa,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,gBAC9BE,KAAMH,SAASC,cAAc,eAC7BG,OAAQJ,SAASC,cAAc,mBAE5BF,KAAKM,iBAAiB,UAK3B,SAAqBC,GACnBA,EAAEC,iBACF,MAAQL,MAAAM,EAAKL,KAAEA,EAAIC,OAAEA,GAAWE,EAAEG,cAAcC,SAEhDC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOT,EAAKU,OACxBE,EAAcH,OAAOR,EAAOS,OAE5B,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrCL,GAAcG,EACdG,EAAcD,EAAGL,GAChBO,MAAK,EAACC,SAAEA,EAAQjB,MAAEA,MACjBL,EAAAuB,OAAOC,QAAQ,uBAAqBF,QAAiBjB,OACnDoB,QAAMC,IAAI,uBAAqBJ,QAAiBjB,MAAU,IAE7DsB,OAAM,EAACL,SAAEA,EAAQjB,MAAEA,MAClBL,EAAAuB,OAAOK,QAAQ,sBAAoBN,QAAiBjB,OAClDoB,QAAMC,IAAI,sBAAoBJ,QAAejB,MAAU,IAG7DI,EAAEoB,OAAOC,O,IAxBX,IAAIhB,EAAa,KACbG,EAAY,KACZC,EAAc,KAyBlB,SAASE,EAAcE,EAAUjB,GAC/B,MAAM0B,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAACb,E,MAAUjB,IAEnB+B,EAAO,C,SAACd,E,MAAUjB,GAAO,GAE1BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('.form[delay]'),\n  step: document.querySelector('.form[step]'),\n  amount: document.querySelector('.form[amount]'),\n};\nrefs.form.addEventListener('submit', clickSubmit);\nlet delayInput = null;\nlet stepInput = null;\nlet amountInput = null;\n\nfunction clickSubmit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.currentTarget.elements;\n\n  delayInput = Number(delay.value);\n  stepInput = Number(step.value);\n  amountInput = Number(amount.value);\n\n  for (let i = 1; i <= amountInput; i += 1) {\n    delayInput += stepInput;\n    createPromise(i, delayInput)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n  e.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay)\n  });\n}\n"],"names":["$iQIUW","parcelRequire","form","document","querySelector","delay","step","amount","addEventListener","e","preventDefault","delay1","currentTarget","elements","$47d4ff9957288465$var$delayInput","Number","value","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","i","$47d4ff9957288465$var$createPromise","then","position","Notify","success","console","log","catch","failure","target","reset","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.f178e34a.js.map"}